<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kayak</name>
    </assembly>
    <members>
        <member name="M:Kayak.FileExtensions.WriteFile(Kayak.KayakResponse,System.IO.FileInfo)">
            <summary>
            Writes a file on disk as an HTTP response. Calls GetDirectOutputStream() first with the
            file size. This method does not set Content-Type, If-Modified-Since, etc.. For those 
            features, see KayakContext.ServeFile().
            </summary>
        </member>
        <member name="M:Kayak.FileExtensions.ServeFile(Kayak.KayakContext,System.IO.FileInfo)">
            <summary>
            Serves a request for a static file. Supports the If-Modified-Since request
            header for more efficient transfers, and attempts to guess the MIME type of the file
            based on its extension. To set your own MIME type, set the ContentType property
            on the Response before calling this method. If the file does not exist,
            a 404 response is generated.
            </summary>
        </member>
        <member name="T:Kayak.KayakResponse">
            <summary>
            Encapsulates an HTTP response.
            </summary>
        </member>
        <member name="M:Kayak.KayakResponse.GetDirectOutputStream(System.Int64)">
            <summary>
            Causes all headers to be sent, and returns the non-buffered, direct-to-client output stream.
            </summary>
            <param name="contentLength">The known length of the content you will be sending through the stream.</param>
        </member>
        <member name="M:Kayak.KayakResponse.GetDirectOutputStream">
            <summary>
            Causes all headers to be sent, and returns the non-buffered, direct-to-client output stream.
            The output stream will be sent using Transfer-encoding: chunked.
            </summary>
        </member>
        <member name="M:Kayak.KayakResponse.Clear">
            <summary>
            Clears the contents of the in-memory output buffer, along with all headers.
            </summary>
        </member>
        <member name="M:Kayak.KayakResponse.ClearOutput">
            <summary>
            Clears the contents of the in-memory output buffer.
            </summary>
        </member>
        <member name="M:Kayak.KayakResponse.Complete">
            <summary>
            Flush buffers, cleanup, ensure headers and response are sent. This method is called
            automatically after processing every request, though you can call it yourself.
            </summary>
        </member>
        <member name="M:Kayak.KayakResponse.End">
            <summary>
            Stops processing the current request, aborts the current thread, and disconnects immediately. You can call this at any time. 
            For example, you might use it to abort the transfer of a posted file if you can tell by the headers that the request is bogus, thereby saving bandwidth.
            </summary>
        </member>
        <member name="M:Kayak.KayakResponse.Suspend">
            <summary>
            Aborts the current thread, but will not complete the response and close the connection to the client.
            This is designed for "AJAX push" or "Comet" style features.
            </summary>
        </member>
        <member name="M:Kayak.KayakResponse.Write(System.String)">
            <summary>
            Shortcuts for Output.Write().
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.IsCompleted">
            <summary>
            Gets whether the response has been completed and sent to the client.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.IsBuffered">
            <summary>
            Gets whether the response is being buffered in memory, which is true by default and becomes false if GetDirectOutputStream() is called.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.Headers">
            <summary>
            Gets a <code>NameValueDictionary</code> of HTTP headers that will be sent with this response.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.HeadersSent">
            <summary>
            Gets whether the response headers have been sent to the client.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.Cookies">
            <summary>
            Gets an <code>HttpCookieCollection</code> of cookies that will be sent with this response.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.OutputStream">
            <summary>
            Gets the in-memory response data buffer.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.ContentLength">
            <summary>
            Gets the content length specified for GetDirectOutputStream, or the current size of the in-memory buffer if applicable.
            Throws an exception if a length was not specified for GetDirectOutputStream.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code (e.g., 200, 404, 304, etc.) to be sent with the response. An exception
            will be thrown if this property is set after the headers have been sent.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.StatusDescription">
            <summary>
            Gets or sets the HTTP status description (e.g., "OK", "Not Found", etc.) to be sent with the response. An exception
            will be thrown if this property is set after the headers have been sent.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.Output">
            <summary>
            Gets a TextWriter for writing text to the in-memory response data buffer.
            </summary>
        </member>
        <member name="P:Kayak.KayakResponse.ContentType">
            <summary>
            Gets or sets the HTTP Content-Type (e.g., "text/html", "image/jpeg", etc.).
            </summary>
        </member>
        <member name="T:Kayak.IO.MultipartFormParser">
            <summary>
            Parses MIME-encoded text, and supports extracting file data streams.
            </summary>
        </member>
        <member name="T:Kayak.IO.MultipartFormDataStream">
            <summary>
            Encapsulates the data portion of a MIME-encoded data stream.
            </summary>
        </member>
        <member name="M:Kayak.FileResponder.RespondToContext(Kayak.KayakContext)">
            <summary>
            Returns true if the request maps to a file (and it exists).
            </summary>
        </member>
        <member name="T:Kayak.NameValuePair">
            <summary>
            Defines a pair of a single name and one or more values assocated with that name.
            </summary>
        </member>
        <member name="M:Kayak.NameValuePair.#ctor(System.String,System.Collections.Generic.IList{System.String})">
            <summary>
            Creates a new NameValuePair with the given name and collection of values.
            </summary>
            <param name="values">The collection of values associated with the given name.
            Note that they will not be copied to a new collection.</param>
        </member>
        <member name="M:Kayak.NameValuePair.#ctor(System.String,System.String)">
            <summary>
            Creates a new NameValuePair with the given name and single value.
            </summary>
        </member>
        <member name="P:Kayak.NameValuePair.Value">
            <summary>
            Gets the value associated with this name. If there are multiple values, they will be
            returned as one comma-separated string (without padding).
            </summary>
        </member>
        <member name="T:Kayak.NameValueDictionary">
            <summary>
            Implements a sorted list of string name-value pairs, with semantics like a string-string
            hashtable. Names are permitted to have multiple values.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.#ctor">
            <summary>
            Initializes a new empty instance of NameValueDictionary.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.BecomeReadOnly">
            <summary>
            Makes this dictionary read-only. This is a one-way street.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Add(System.String,System.String)">
            <summary>
            Adds a name-value pair to this dictionary. If the name exists in the dictionary already,
            the value will be added to the list of values for that name.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Add(Kayak.NameValueDictionary)">
            <summary>
            Adds the name-value pairs in the dictionary to this dictionary. If a name already
            exists, the values will be appended to the list of values for that name.
            </summary>
            <param name="dict"></param>
        </member>
        <member name="M:Kayak.NameValueDictionary.AddRange(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds a name-values pair to this dictionary. If the name exists in the dictionary already,
            the values will be appended to the list of values for that name.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Remove(System.String)">
            <summary>
            Removes the values associated with the given name from this dictionary.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Get(System.String)">
            <summary>
            Gets a value for a name as a single string. If you query a name that has
            multiple values, the values will be combined to a comma-separated-string using
            the ToCommaSeparatedString() extension method. If you query a name that is not 
            present in the dictionary, null will be returned.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.GetValues(System.String)">
            <summary>
            Gets a list of all values associated with the given name.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Set(System.String,System.String)">
            <summary>
            Sets the value associated with the given name to the given string. The value will not
            be inspected in any way (for instance, you cannot use this method to set multiple values).
            This will replace out any existing values for the name.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Associates the given set of values with the given name. This will replace any existing
            values for the name. The values will be copied into a new list.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Contains(System.String)">
            <summary>
            Returns true if this dictionary contains the given string.
            </summary>
        </member>
        <member name="M:Kayak.NameValueDictionary.Add(Kayak.NameValuePair)">
            <summary>
            Adds the given NameValuePair to this dictionary. If the name exists already, the values
            will be appended to the existing list of values.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Kayak.NameValueDictionary.Clear">
            <summary>
            Removes all elements from our dictionary.
            </summary>
        </member>
        <member name="P:Kayak.NameValueDictionary.IsReadOnly">
            <summary>
            Gets whether this dictionary is read-only.
            </summary>
        </member>
        <member name="P:Kayak.NameValueDictionary.Names">
            <summary>
            Gets a list of all the names in this dictionary.
            </summary>
        </member>
        <member name="P:Kayak.NameValueDictionary.Item(System.String)">
            <summary>
            Gets or sets a name-value pair as a single string. See the Get and Set methods on this
            class for additional information about behavior.
            </summary>
        </member>
        <member name="P:Kayak.NameValueDictionary.Count">
            <summary>
            Gets the number of name-value pairs in this dictionary.
            </summary>
        </member>
        <member name="T:Kayak.KayakRequest">
            <summary>
            Encapsulates an HTTP request.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.RequestUri">
            <summary>
            Gets the raw, url for this request, i.e. "/some+path?with=my%20params" without "http://".
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.Headers">
            <summary>
            Gets the collection of HTTP request headers.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.Method">
            <summary>
            Gets the HTTP method used for this request, i.e. "POST".
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.HttpVersion">
            <summary>
            Gets the HTTP version used for this request, i.e., "HTTP/1.1".
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.ContentLength">
            <summary>
            Gets the size of the request body, as indicated by the client in the Content-Length header.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.ContentType">
            <summary>
            Gets the Content-Type for this request.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.ContentEncoding">
            <summary>
            Gets the Content-Encoding for this request.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.UserAgent">
            <summary>
            Gets the User-Agent for this request.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.Path">
            <summary>
            Get the Uri Path for this request, i.e. "/some/path" without querystring or "http://".
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.QueryString">
            <summary>
            Gets the collection of parameters defined in the request uri's query string.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.Cookies">
            <summary>
            Gets the collection of cookies submitted with this request.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.PreserveInputStream">
            <summary>
            Gets or sets whether to forbid this KayakRequest from reading from the request body for any reason.
            If this is true, accessing Request.Form will result in an exception.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.Form">
            <summary>
            Gets the collection of parameters defined in the posted request body. Accessing this member
            will cause the entire request body to be read and parsed.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.Items">
            <summary>
            Gets an empty collection of name/value parameters you can use for storing your own string pairs.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.Item(System.String)">
            <summary>
            Searches (in this order) Items, QueryString, Form (if PreserveInputStream == false), and Cookies dictionaries for the given name.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.AllNames">
            <summary>
            Gets all request variable names, yielding (in this order) the names in the Items, QueryString, Form (if PreserveInputStream == false), and Cookies dictionaries.
            </summary>
        </member>
        <member name="P:Kayak.KayakRequest.InputStream">
            <summary>
            Gets a safe stream for reading request body data.
            </summary>
        </member>
        <member name="M:Kayak.IO.ChunkedStream.FinalFlush">
            <summary>
            Flushes the stream and sends the ending byte sequence. This method is called for you
            automatically when the HTTP response naturally concludes.
            </summary>
        </member>
        <member name="T:Kayak.HttpExtensions">
            <summary>
            A collection of extension methods to help speak HTTP.
            </summary>
        </member>
        <member name="M:Kayak.HttpExtensions.ReadHttpRequestUri(System.IO.Stream,System.String@,System.String@)">
            <summary>
            Parses the first line of an incoming HTTP request.
            </summary>
        </member>
        <member name="M:Kayak.HttpExtensions.ReadHttpHeaders(System.IO.Stream)">
            <summary>
            Parses a list of HTTP request headers, terminated by an empty line.
            </summary>
        </member>
        <member name="P:Kayak.KayakContextArgs.Context">
            <summary>
            Gets the context of the HTTP request related to this event.
            </summary>
        </member>
        <member name="P:Kayak.KayakConnectionArgs.Socket">
            <summary>
            Gets the Socket related to this connection.
            </summary>
        </member>
        <member name="P:Kayak.KayakConnectionArgs.CancelConnection">
            <summary>
            Gets or sets whether this connection should be cancelled immediately.
            </summary>
        </member>
        <member name="P:Kayak.KayakExceptionArgs.Exception">
            <summary>
            Gets the Exception that occured while processing a request.
            </summary>
        </member>
        <member name="P:Kayak.KayakAbortedArgs.AbortInfo">
            <summary>
            Gets the ResponseAbortInfo object that was generated when the response was aborted.
            </summary>
        </member>
        <member name="T:Kayak.ResponseAbortInfo">
            <summary>
            Describes how the server should continue after a response was aborted using KayakResponse.End()
            or KayakResponse.Suspend().
            
            By raising a ThreadAbortException with this state in your RequestBegan handlers or in your 
            responsers RespondToContext methods, you are asking the server to immediately stop processing
            and release the context. The behavior property instructs the server on whether or not it 
            should close the connection first. 
            
            If you do not close the connection, you are responsible for holding on to the context,
            eventually passing it to KayakServer.QueueReprocessContext, and allowing the connection 
            to close. 
            
            By leaving the connection open, you can delay processing of a request without blocking a server
            thread, and pass the context back to the server later in response to an external event.
            
            You can subclass this to add your own state for processing in KayakServer.ResponseAborted.
            </summary>
        </member>
        <member name="T:Kayak.ConnectionBehavior">
            <summary>
            Describes how the server should proceed with a connection after a ThreadAbortException is raised
            with a ResponseAbortInfo state.
            </summary>
        </member>
        <member name="F:Kayak.ConnectionBehavior.Disconnect">
            <summary>
            This instructs the server to disconnect immediately at any point in the processing of a request.
            </summary>
        </member>
        <member name="F:Kayak.ConnectionBehavior.StayConnected">
            <summary>
            Instructs the server to stop processing and release the context but leave the connection open. 
            You must keep track of the context and close its connection later by passing it to
            KayakServer.QueueReprocessContext.
            </summary>
        </member>
        <member name="T:Kayak.KayakServer">
            <summary>
            A simple threaded HTTP server.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.#ctor">
            <summary>
            Initializes a new KayakServer instance which will listen on all local addresses on port 8080.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.Start">
            <summary>
            Starts listening for incoming requests.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.Stop">
            <summary>
            Stops listening for incoming requests immediately, and waits for the currently active
            requests to end normally.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.CreateListenerSocket">
            <summary>
            Creates the single Socket used to listen for incoming requests. You can override
            this method to create your own Socket, perhaps with custom properties.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.OnStarting">
            <summary>
            Called when the server is about to start listening for connections. Default behavior
            is to dispatch the Starting event.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.OnStopped">
            <summary>
            Called when the server has been asked to stop, and after all pending HTTP requests have been
            processed. Default behavior is to dispatch the Stopped event.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.QueueReprocessContext(Kayak.KayakContext)">
            <summary>
            Schedules a suspended KayakContext for reprocessing by the server in one of its worker threads.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.OnConnectionAccepted(System.Net.Sockets.Socket,System.Boolean@)">
            <summary>
            Called after a connection is accepted. Default behavior is to dispatch the
            ConnectionAccepted event.
            </summary>
            <param name="socket"></param>
        </member>
        <member name="M:Kayak.KayakServer.OnRequestBegan(Kayak.KayakContext)">
            <summary>
            Processes the given HTTP request. Default behavior is to dispatch the RequestBegan event and (if the response
            has not been completed yet) iterate over the responders list, calling RespondToContext on each. If there were 
            responders in the Responders list but none returned true, a 404 response is given.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.OnResponseAborted(Kayak.KayakContext,Kayak.ResponseAbortInfo)">
            <summary>
            Called when the response is ended intentionally using Response.Abort(). Default
            behavior is to raise the ResponseAborted event.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.OnRequestException(Kayak.KayakContext,System.Exception)">
            <summary>
            Called when an exception is received while processing the request. Default behavior
            is to raise the RequestException event.
            </summary>
        </member>
        <member name="M:Kayak.KayakServer.OnResponseCompleted(Kayak.KayakContext)">
            <summary>
            Called after the HTTP response is sent, but before the connection is closed. Default
            behavior is to raise the ResponseCompleted event
            </summary>
        </member>
        <member name="T:Kayak.IO.RequestBodyStream">
            <summary>
            Limits the number of bytes that can be read from an underlying Stream.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.CopyToEnd(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies data from the source stream to the destination stream until reaching the 
            end of the source stream, with a buffer size of 4096 bytes.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.CopyToEnd(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Copies data from the source stream to the destination stream until reaching the 
            end of the source stream.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.CopyFromBeginning(System.IO.Stream,System.IO.Stream)">
            <summary>
            Resets the source stream's position to zero, then copies this.Length number of
            bytes from this Stream to the destination Stream, using a maximum buffer
            size of 4096 bytes.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.CopyFromBeginning(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Resets the source stream's position to zero, then copies the given number
            of bytes from this Stream to the destination Stream, using a maximum buffer
            size of 4096 bytes.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.Copy(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies this.Length number of bytes to the destination stream, using a maximum
            buffer size of 4096 bytes.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.Copy(System.IO.Stream,System.IO.Stream,System.Int64)">
            <summary>
            Copies the given number of bytes from this Stream to the destination Stream,
            using a maximum buffer size of 4096 bytes.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.Copy(System.IO.Stream,System.IO.Stream,System.Int64,System.Int64)">
            <summary>
            Copies the given number of bytes from this Stream to the destination Stream, using the
            supplied maximum buffer size.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[],System.Int64)">
            <summary>
            Reads exactly the given number of bytes into the provided buffer, or throws an exception.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.ReadExactly(System.IO.Stream,System.Byte[])">
            <summary>
            Fills the given buffer completely from the source stream, or throws an exception.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.ReadExactly(System.IO.Stream,System.Int64)">
            <summary>
            Reads exactly the given number of bytes and returns the data, or throws an exception.
            </summary>
        </member>
        <member name="M:Kayak.StreamExtensions.ReadLine(System.IO.Stream,System.Text.Encoding,System.Int32)">
            <summary>
            Reads a line terminated with \r\n off the source stream into a string using the 
            given Encoding. Throws if the line buffer exceeds maxLength bytes.
            </summary>
        </member>
        <member name="T:Kayak.KayakContext">
            <summary>
            Encapsulates the context of a single HTTP request and response.
            </summary>
        </member>
    </members>
</doc>
